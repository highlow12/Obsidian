{"schemaVersion":2,"id":"2d06a004-69c2-4bb7-aae1-b9798b4d5aee","title":"2차원 좌표상의 점 3개로 이루어진 삼각형을 2개 입력받아서 그 두개의 삼각형이 서로 겹쳐","createdAt":1733201987243,"updatedAt":1733202010569,"messages":[{"role":"user","content":{"root":{"children":[{"children":[{"detail":0,"format":0,"mode":"normal","style":"","text":"2차원 좌표상의 점 3개로 이루어진 삼각형을 2개 입력받아서 그 두개의 삼각형이 서로 겹쳐져 있는지 판단하는 파이썬 코드를 작성해줘","type":"text","version":1}],"direction":"ltr","format":"","indent":0,"type":"paragraph","version":1,"textFormat":0,"textStyle":""}],"direction":"ltr","format":"","indent":0,"type":"root","version":1}},"promptContent":[{"type":"text","text":"\n\n2차원 좌표상의 점 3개로 이루어진 삼각형을 2개 입력받아서 그 두개의 삼각형이 서로 겹쳐져 있는지 판단하는 파이썬 코드를 작성해줘\n\n"}],"id":"1afd857f-d5cd-4542-a5e5-e6ed394373e6","mentionables":[{"type":"current-file","file":"1. 프로젝트/2024 프로그래밍 스터디/무제 파일.md"}]},{"role":"assistant","content":"두 삼각형이 겹치는지 판단하는 방법에는 여러 가지가 있습니다. 여기서는 두 삼각형이 서로 겹치는지 판단하는 한 가지 방법을 제시하고, 그에 따른 파이썬 코드를 제공합니다. 이 방법은 모든 경우를 완벽하게 커버하지는 않을 수 있으므로, 실제 사용 시에는 상황에 맞게 수정해야 할 수 있습니다.\n\n**방법:** 각 삼각형의 모든 변을 선분으로 보고, 두 삼각형에서 선분의 교차 여부를 검사합니다. 만약 교차하는 선분이 있다면 두 삼각형은 겹칩니다. 또한, 한 삼각형이 다른 삼각형에 완전히 포함되는 경우를 확인하기 위해, 한 삼각형의 세 꼭짓점이 모두 다른 삼각형 내부에 있는지 검사합니다.\n\n<smtcmp_block language=\"python\">\n```python\nimport numpy as np\n\ndef cross_product(p1, p2, p3):\n    return (p2[0] - p1[0]) * (p3[1] - p1[1]) - (p2[1] - p1[1]) * (p3[0] - p1[0])\n\ndef is_intersect(p1, p2, p3, p4):\n    return (cross_product(p1, p2, p3) * cross_product(p1, p2, p4) < 0 and \n            cross_product(p3, p4, p1) * cross_product(p3, p4, p2) < 0)\n\ndef is_point_in_triangle(p, t):\n    d1 = cross_product(t[0], t[1], p)\n    d2 = cross_product(t[1], t[2], p)\n    d3 = cross_product(t[2], t[0], p)\n    has_neg = (d1 < 0) or (d2 < 0) or (d3 < 0)\n    has_pos = (d1 > 0) or (d2 > 0) or (d3 > 0)\n    return not (has_neg and has_pos)\n\ndef is_triangle_overlap(t1, t2):\n    for i in range(3):\n        for j in range(3):\n            if is_intersect(t1[i], t1[(i + 1) % 3], t2[j], t2[(j + 1) % 3]):\n                return True\n\n    if all(is_point_in_triangle(p, t2) for p in t1) or \\\n       all(is_point_in_triangle(p, t1) for p in t2):\n        return True\n\n    return False\n\n\n# 테스트 예시\ntriangle1 = [[0, 0], [1, 0], [0, 1]]\ntriangle2 = [[0.5, 0.5], [1.5, 0.5], [0.5, 1.5]]\nprint(is_triangle_overlap(triangle1, triangle2))  # True\n\ntriangle3 = [[2, 2], [3, 2], [2, 3]]\nprint(is_triangle_overlap(triangle1, triangle3))  # False\n\ntriangle4 = [[0.1, 0.1], [0.2, 0.1], [0.1, 0.2]]\nprint(is_triangle_overlap(triangle1, triangle4))  # True (포함)\n```\n</smtcmp_block>\n\n**설명:**\n\n* `cross_product(p1, p2, p3)`: 점 p1, p2, p3에 대해 외적을 계산합니다.\n* `is_intersect(p1, p2, p3, p4)`: 선분 p1p2와 선분 p3p4가 교차하는지 검사합니다.\n* `is_point_in_triangle(p, t)`: 점 p가 삼각형 t 내부에 있는지 검사합니다.\n* `is_triangle_overlap(t1, t2)`: 두 삼각형 t1, t2가 겹치는지 검사합니다.\n\n\n이 코드는 두 삼각형의 각 변의 교차 여부를 확인하고, 한 삼각형이 다른 삼각형 내부에 있는지 확인하여 겹침 여부를 판단합니다.  입력은 각 삼각형의 꼭짓점 좌표를 담은 2차원 배열 형태입니다.  테스트 예시를 통해 사용법을 확인할 수 있습니다.","id":"1b8974c8-1b7e-4bb6-8ace-37782492f2f2","metadata":{"usage":{"prompt_tokens":614,"completion_tokens":1071,"total_tokens":1685},"model":{"provider":"gemini","model":"gemini-1.5-pro"}}}]}